if &compatible
  set nocompatible
endif

let s:jetpackfile = expand('<sfile>:p:h') .. '/.vim/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim'
let s:jetpackurl = "https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim"
if !filereadable(s:jetpackfile)
  call system(printf('curl -fsSLo %s --create-dirs %s', s:jetpackfile, s:jetpackurl))
endif

packadd vim-jetpack
call jetpack#begin()
Jetpack 'tani/vim-jetpack', {'opt': 1} "bootstrap
Jetpack 'nanotech/jellybeans.vim'      " colorscheme
Jetpack 'itchyny/lightline.vim'        " カスタムステータスライン
Jetpack 'tyru/caw.vim'                 " 行選択コメントアウト
Jetpack 'Shougo/context_filetype.vim'  " カーソル位置でfiletypeを切替
Jetpack 'tmhedberg/matchit'            " %ブレース対応拡張
Jetpack 'tpope/vim-surround'           " カッコ処理拡張
Jetpack 'tpope/vim-repeat'             " コマンド繰り返し強化
Jetpack 'airblade/vim-gitgutter'       " git差分表示
Jetpack 'markonm/traces.vim'           " 置換プレビュー
Jetpack 'haya14busa/incsearch.vim'     " incsearch拡張
Jetpack 'bling/vim-bufferline'         " statuslineにbuffer一覧
Jetpack 'LeafCage/yankround.vim'       " yank履歴管理
Jetpack 'junegunn/vim-easy-align'      " テキスト整形
Jetpack 'junegunn/fzf', { 'do': { -> fzf#install() } }
Jetpack 'junegunn/fzf.vim'
Jetpack 'vim-jp/vimdoc-ja'             " 日本語ドキュメント
Jetpack 'yegappan/taglist'             " 関数一覧表示
Jetpack 'kana/vim-operator-user'       " オペレータ定義
Jetpack 'kana/vim-operator-replace'    " 置換オペレータ追加
Jetpack 'thinca/vim-quickrun'          " quick run
Jetpack 'mattn/vim-molder'             " ファイラ
Jetpack 'github/copilot.vim'           " copilot
Jetpack 'ConradIrwin/vim-bracketed-paste' " enables transparent pasting

Jetpack 'prabirshrestha/vim-lsp'
Jetpack 'mattn/vim-lsp-settings'
Jetpack 'halkn/lightline-lsp'
Jetpack 'prabirshrestha/asyncomplete.vim'
Jetpack 'prabirshrestha/asyncomplete-file.vim'
Jetpack 'prabirshrestha/asyncomplete-buffer.vim'
Jetpack 'prabirshrestha/asyncomplete-lsp.vim'
Jetpack 'prabirshrestha/asyncomplete-tags.vim'

Jetpack 'hrsh7th/vim-vsnip'
Jetpack 'hrsh7th/vim-vsnip-integ'

let g:polyglot_disabled = ['csv']
Jetpack 'sheerun/vim-polyglot'         " filetype pluginset

call jetpack#end()

filetype plugin indent on

" status line
set laststatus=2                    " 常にステータスラインを表示
set cmdheight=2                     " コマンドラインで利用する行数
set statusline=[%p%%]\ %t%r%m%=\ %{&ff}\ \|\ %{(&fenc!=''?&fenc:&enc)}\ %y\ %c:%l

" edit
set autoread                        " 他で書き換えられたら自動で再読み込み
set hidden                          " 編集中でもほかのファイルを開けるようにする
set backspace=indent,eol,start      " バックスペースでインデントや改行を削除
set confirm                         " 変更バッファを保存するか確認
set gdefault                        " 置換の際のgオプションをデフォルトで有効化

" display
syntax on
set notitle                         " ウィンドウのタイトルを変更する
set scrolloff=5                     " スクロール時の余白確保
set vb t_vb=                        " ビープを鳴らさない
set showcmd                         " コマンドをステータス行に表示
set showmatch                       " 括弧の対応をハイライト
set matchtime=1                     " 括弧ハイライト表示を0.1sで
set number                          " 行番号表示
set nolist                          " タブや改行文字を表示しない
set noruler                         " ルーラーを表示しない
set formatoptions+=mM               " テキスト挿入中の自動折り返しを日本語に対応
set shellslash                      " ディレクトリの区切り文字に/指定
set cursorline                      " カーソル行非表示
set wrap                            " ウィンドウ幅より長い行を折り返し表示
set display=lastline                " 長い行を表示する
set nofoldenable                    " 折りたたみをすべて展開

" indent
set autoindent                      " 自動的にインデントする
set smartindent                     " 新規行に対して自動でインデントする
set tabstop=2                       " タブの画面上での幅
set shiftwidth=2
set expandtab                       " タブをスペースに展開する
set smarttab                        " 行頭の余白でタブを押すとshiftwidthだけインデントする

" encoding
set encoding=utf-8                  " デフォルトエンコーディング
set fileencoding=utf-8              " デフォルトのファイルエンコーディング
set fileencodings=utf-8,ucs-bom,iso-2022-jp-3,iso-2022-jp-2,euc-jisx0213,euc-jp,cp932 " vimが表示できるエンコードのリスト
set fileformats=unix,mac,dos        " ファイルの改行タイプ指定

" japanese
set ambiwidth=double                " ASCIIと同じ文字幅

" search
set wrapscan                        " 検索で最終行まで行ったら先頭に戻る
set ignorecase                      " 大文字小文字無視
set smartcase                       " 大文字ではじめたら大文字小文字無視しない
set incsearch                       " インクリメンタルサーチ
set nohlsearch                      " 検索文字をハイライトしない
set grepprg=git\ grep\ -iwn\ $*     " grepにgit grepを使用する
set wildignore+=*.so,*.swp,*.zip,*.log,*.gz,*.pdf,*.o,*.obj,*.jpg,*.png,*/node_modules/*,*/local/*,*/vendor/*
if has('path_extra')
  set tags+=tags;.tags;.git/tags;.git/.tags;~/tags;~/.tags
endif

" backup
set backup
set backupdir=~/.vim-backup
if !isdirectory(&backupdir)
  call mkdir(&backupdir, "p")
endif

" menu / complation
set wildmenu                        " コマンド補完メニューを表示
set wildmode=full                   " 複数のマッチがあるときは全てのマッチを表示し、共通する最長の文字列まで補完
set history=1000                    " コマンドの履歴数
set complete=.,w,b,u,t,k            " 補完に辞書ファイル追加
set pumheight=10                    " 補完メニューの最大高さ指定
set completeopt=menuone,noinsert,fuzzy    " 補完候補が１つでも表示
set shortmess+=c                    " 補完メッセージ非表示
if has('patch-7.4.775')
  set completeopt+=noinsert         " 自動選択不可
endif

" help
set helplang=ja,en                  " ヘルプの検索順序

set t_Co=256
set background=dark
set termguicolors
colorscheme jellybeans

" color
let g:jellybeans_overrides = {
\    'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
\}
if has('termguicolors') && &termguicolors
    let g:jellybeans_overrides['background']['guibg'] = 'none'
endif

" keybind ----------------------------------------------------------
inoremap <silent> jj <Esc>
inoremap <C-j> <Esc>
noremap <C-j> <Esc>
noremap! <C-j> <Esc>

" 行単位で移動
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" 検索語を画面中央に
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" 検索文字のハイライト/アンハイライト
nnoremap <Esc><Esc> :<C-u>set nohlsearch<Return>
nnoremap * :<C-u>set hlsearch<Return>*
nnoremap # :<C-u>set hlsearch<Return>#

" window操作
nnoremap + 3<C-w>+
nnoremap - 3<C-w>-
nnoremap { 3<C-w><
nnoremap } 3<C-w>>

" バッファ移動
nnoremap <Space> <Esc>:bn<CR>
nnoremap <S-Space> <Esc>:bp<CR>
nnoremap <Left> <Esc>:bp<CR>
nnoremap <Right> <Esc>:bn<CR>
nnoremap <Down> <Esc>:ls<CR>

" コマンドラインモードでEmacキーバインド移動
cnoremap <C-f>  <Right>
cnoremap <C-b>  <Left>
cnoremap <C-a>  <C-b>
cnoremap <C-e>  <C-e>
cnoremap <C-u> <C-e><C-u>
cnoremap <C-v> <C-f>a

" カーソル下のキーワードをヘルプで引く
nnoremap <C-h> :<C-v>help<Space><C-r><C-w><Enter>

" カーソル下のキーワードをgrepする
nnoremap <C-g> :silent <C-v>grep<Space><Space><C-r><C-w><CR>

" buffer内grep
command! -nargs=1 Bufgrep bufdo vimgrepadd /<args>/ % | cwin

" visual選択を*検索
vnoremap * "zy:let @/ = @z<CR>n

" make
nnoremap <Leader>m <ESC>:make<CR>

" コマンド履歴の暴発を防ぐ
nnoremap q: <ESC>
nnoremap q/ <ESC>
nnoremap q? <ESC>

" 行末までヤンク
nnoremap Y y$

" sudo write
cmap w!! w !sudo tee > /dev/null %

" toggle quickfix
if exists('g:__QUICKFIX_TOGGLE__')
    finish
endif
let g:__QUICKFIX_TOGGLE__ = 1

function! ToggleQuickfix()
    let l:nr = winnr('$')
    cwindow
    let l:nr2 = winnr('$')
    if l:nr == l:nr2
        cclose
    endif
endfunction

nnoremap <script> <silent> <Leader>q :call ToggleQuickfix()<CR>
" command -----------------------------------------------------------

" ファイルエンコーディング指定再読み込み
command! Cp932 edit ++enc=cp932
command! Utf8 edit ++enc=utf-8
command! Euc edit ++enc=euc-jp

" 現在のバッファ以外を削除
command! OnlyBuf :call s:delete_hide_buffer()
function! s:delete_hide_buffer()
  let current_buffer = bufnr('%') > 0 ? bufnr('%') : bufnr(a:buffer + 0)
  for n in range(1, bufnr('$'))
    if n != current_buffer && buflisted(n)
      silent execute "bdelete " . n
    endif
  endfor
  echomsg "hidden buffers deleted."
endfunction

" swapファイルが有る場合は自動的にread onlyで開く
augroup SwapchoiceReadonly
  autocmd!
  autocmd SwapExists * let v:swapchoice = 'o'
augroup END

" 挿入モードに入る時に自動でコメントアウトされないようにする
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" 挿入モード時、pasteオプションを解除する
autocmd InsertLeave * set nopaste

" 自動的にQuickFixリストを表示する
autocmd QuickfixCmdPost make,grep,grepadd,vimgrep,vimgrepadd cwin
autocmd QuickFixCmdPost lmake,lgrep,lgrepadd,lvimgrep,lvimgrepadd lwin
autocmd FileType help,qf nnoremap <buffer> <CR> <CR>:cclose<CR>

" 最後に残ったウィンドウがQuickfixだったら終了する
augroup AutoCloseQuickfix
	autocmd!
	autocmd WinEnter * if (winnr('$') == 1) && (getbufvar(winbufnr(0), '&buftype')) == 'quickfix' | quit | endif
augroup END

" 全角/行末スペースを表示
scriptencoding utf-8
augroup AdditionalHighlights
  autocmd!
  highlight IgnoreSpace ctermbg=red guibg=red
  autocmd Colorscheme * highlight IgnoreSpace ctermbg=red guibg=red
  autocmd VimEnter,WinEnter * match IgnoreSpace /\s\+$\|　/
augroup END

" filetype ----------------------------------------------------------

filetype on
filetype indent on  " ファイルタイプによるインデント設定
filetype plugin on  " ファイルタイプごとのプラグイン読み込み

augroup templateGroup
  autocmd!
  autocmd BufNewFile,BufNew,BufRead *.changelog,changelog setlocal filetype=changelog
  autocmd BufNewFile,BufRead *.cfm,*.tx,*.tt setlocal filetype=html
  autocmd BufNewFile,BufRead *.js,*.es6,ts,tsx setlocal filetype=javascript
  autocmd BufNewFile,BufRead *.pl,*.pm,*.t,*.cgi,*.psgi,cpanfile setlocal filetype=perl
  autocmd BufNewFile,BufRead *.rb,*.feature,*.haml setlocal filetype=ruby
  autocmd BufNewFile *.html :0r $HOME/.vim/template/template.html
  autocmd BufNewFile *.pl,*.pm :0r $HOME/.vim/template/template.pl
  autocmd BufNewFile *.py :0r $HOME/.vim/template/template.py
  autocmd BufNewFile Makefile :0r $HOME/.vim/template/Makefile
augroup END

noremap <Leader>pt <Esc>:%! perltidy -se<CR>
vnoremap <Leader>pt <Esc>:'<,'>! perltidy -se<CR>

" plugin  ----------------------------------------------------------
" bufferline
let g:bufferline_echo = 0

" caw
nmap <Leader>x <Plug>(caw:hatpos:toggle)
vmap <Leader>x <Plug>(caw:hatpos:toggle)

" fzf.vim
if executable('rg')
  function! FzfGrep(query, fullscreen)
    " --hidden 隠しファイルも隠しディレクトリも含める
    " --follow シンボリックリンクも含める
    " --glob   対象ファイルのファイルパターンを指定
    let command_fmt = 'rg --column --line-number --no-heading --ignore-case --hidden --follow --glob "!.git/*" --color=always --smart-case -- %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)

  endfunction

  " RGマンドを定義。同名コマンドが定義されていた場合上書きする
  " RGコマンドはFZGrep関数を呼び出す
  command! -nargs=* -bang RG call FzfGrep(<q-args>, <bang>0)

  set grepprg=rg\ --vimgrep\ --no-heading\ --hidden
  set grepformat=%f:%l:%c:%m
endif

function! FzfPaste()
  let reg = execute(":reg")
  let regs = split(reg, "\n")
  call remove(regs, 0)
  call fzf#run(fzf#wrap({'source': regs, 'sink': funcref('s:write')}))
endfunction
command! FzfPaste :call FzfPaste()

func! s:write(s) abort
  execute ':norm ' . strcharpart(a:s,5,2) . 'p'
endfunc

command! -bang FzfGitBranchFiles
  \ call fzf#run(fzf#wrap({'source':
  \   "git diff --name-only $(git show-branch --sha1-name $(git symbolic-ref --short refs/remotes/origin/HEAD) $(git rev-parse --abbrev-ref HEAD) | tail -1 | awk -F'[]~^[]' '{print $2}')",
  \   'sink': 'e',
  \   'options': '-m --prompt "GitBranchFiles>" --preview "bat --color=always  {}"',
  \   }))

nnoremap ff :Files<CR>
nnoremap fg :GFiles<CR>
nnoremap fr :RG<CR>
nnoremap fw vawy:RG <C-R>"<CR>
nnoremap fl :BLines<CR>
nnoremap fh :History<CR>
nnoremap fc :Commits<CR>
nnoremap ;; :Buffers<CR>
nnoremap fp :FzfPaste<CR>
nnoremap fd :FzfGitBranchFiles<CR>
nnoremap <C-g> :RG<CR>

" yankround
let g:yankround_use_region_hl = 1
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)

" taglist
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1       " タグリストだけが表示されているときに自動的にVimを終了するか
let Tlist_Close_On_Select = 1       " タグを選択時に、画面遷移後にタグリストを閉じるか
let Tlist_File_Fold_Auto_Close = 1  " ファイルが非アクティブのとき自動的にタグリストを閉じるか

let g:tlist_javascript_settings = 'javascript;c:class;m:method;f:function;p:property'
let g:tlist_php_settings        = 'php;n:namespace;c:class;i:interface;t:trait;f:function;d:constant;v:variable'
let g:tlist_go_settings         = 'go;p:package;s:struct;i:interface;f:function'
let g:tlist_terraform_settings  = 'terraform;r:resource;d:data;v:variable;m:module;o:output;p:provider'
nnoremap <C-l> :TlistToggle<CR>
nnoremap <C-]> g<C-]>

" quickrun
" nnoremap <Leader>r :QuickRun<CR>
nnoremap \r :cclose<CR>:write<CR>:QuickRun -mode n<CR>
xnoremap \r :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config = {
      \ '_': {
      \   'hook/time/enable': 1,
      \   'outputter': 'error',
      \   'outputter/error/success': 'buffer',
      \   'outputter/error/error': 'quickfix',
      \   'outputter/error/split': ':rightbelow 8sp',
      \   'outputter/error/close_on_empty': 1,
      \ },
      \ 'perl': {
      \   'command': 'perl',
      \   'cmdopt': '-Ilib',
      \   'exec': 'carton exec perl %o %s',
      \ },
      \ 'ruby': {
      \   'command': 'ruby',
      \   'exec': 'bundle exec %c %o %s',
      \ }
      \ }

" EasyAlign
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
vmap ga <Plug>(EasyAlign)
xmap <Leader>t <Plug>(EasyAlign)
nmap <Leader>t <Plug>(EasyAlign)
vmap <Leader>t <Plug>(EasyAlign)

" lightline
let g:lightline = {
   \ 'colorscheme': 'jellybeans',
   \ 'active': {
   \   'right': [ [ 'lsp_errors', 'lsp_warnings', 'lsp_ok', 'lineinfo' ],
   \              [ 'percent' ],
   \              [ 'fileformat', 'fileencoding', 'filetype' ] ],
   \   'left': [ [ 'mode', 'paste' ],
   \             [ 'readonly', 'bufferline' ] ]
   \ },
   \ 'component': {
   \   'filename': '%f'
   \ },
   \ 'component_expand': {
   \   'bufferline':   'LightlineBufferline',
   \   'lsp_warnings': 'lightline_lsp#warnings',
   \   'lsp_errors':   'lightline_lsp#errors',
   \   'lsp_ok':       'lightline_lsp#ok',
   \ },
   \ 'component_type': {
   \   'bufferline':   'tabsel',
   \   'lsp_warnings': 'warning',
   \   'lsp_errors':   'error',
   \   'lsp_ok':       'middle',
   \ },
 \ }

function! LightlineBufferline()
  call bufferline#refresh_status()
  return [ g:bufferline_status_info.before, g:bufferline_status_info.current, g:bufferline_status_info.after]
endfunction

" netrw
let g:netrw_fastbrowse = 0
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_sizestyle = 'H'
let g:netrw_timefmt = "%Y/%m/%d %H:%M:%S"
let g:netrw_preview = 1
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_altv = 1
let g:netrw_alto = 1
let g:netrw_hide = 0
let g:netrw_winsize = 20
augroup NetrwKeyMap
  autocmd!
  autocmd FileType netrw nmap <silent> <buffer> h -
  autocmd FileType netrw nmap <silent> <buffer> l <CR>
  autocmd FileType netrw nmap <silent> <buffer> q <C-w>t:close<CR>
augroup END
noremap <silent> <C-E> :Lexplore<CR>

" gitgutter
set updatetime=250
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
nmap <Leader>hs <Plug>(GitGutterStageHunk)
nmap <Leader>hr <Plug>(GitGutterUndoHunk)
nmap <Leader>hv <Plug>(GitGutterPreviewHunk)

" vim-operator-replace
nmap s <Plug>(operator-replace)

" incsearch
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" lsp-setting
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_virtual_text_enabled = 0

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  nmap <buffer> <C-]> <plug>(lsp-definition)
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
endfunction

augroup LspSettings
  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_settings_root_markers = [
    \ 'Gemfile',
    \ 'cpanfile',
    \ 'package.json',
    \ 'requirements.txt',
    \ '.git',
    \ '.git/'
    \ ]

let g:lsp_settings = {
    \ "typeprof": {"disabled": 1},
    \ "ruby-lsp": {"disabled": 1},
    \ "perlnavigator": {
    \   "workspace_config": {
    \     "perlnavigator": {
    \       "includePaths": [
    \         "lib",
    \         "local/lib/perl5"
    \       ]
    \     }
    \   }
    \ },
    \ "pylsp-all": {
    \   "workspace_config": {
    \     "pylsp": {
    \       "configurationSources": ["flake8"],
    \       "plugins": {
    \         "flake8": {
    \           "enabled": 1,
    \           "ignore": ["E221", "E501"]
    \         },
    \         "pycodestyle": {
    \           "enabled": 0,
    \         },
    \         "mccabe": {
    \           "enabled": 0,
    \         },
    \         "pyflakes": {
    \           "enabled": 0,
    \         },
    \       },
    \     }
    \   }
    \ },
    \}

" asyncomplete
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0
let g:asyncomplete_popup_delay = 200
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" asyncomplete-plugins
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
    \ 'name': 'tags',
    \ 'allowlist': ['c'],
    \ 'completor': function('asyncomplete#sources#tags#completor'),
    \ 'config': {
    \    'max_file_size': 50000000,
    \  },
    \ }))
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'allowlist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'allowlist': ['*'],
    \ 'blocklist': ['go'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ 'config': {
    \    'max_buffer_size': 5000000,
    \  },
    \ }))

" vim-vsnip
let g:vsnip_snippet_dir = expand($HOME . '/.vim/vsnip')

imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

" Jump forward or backward
"imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
"smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
"imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
"smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
"nmap        s   <Plug>(vsnip-select-text)
"xmap        s   <Plug>(vsnip-select-text)
"nmap        S   <Plug>(vsnip-cut-text)
"xmap        S   <Plug>(vsnip-cut-text)

" copilot
let g:copilot_no_tab_map = v:true
let g:copilot_filetypes =  #{
      \   gitcommit: v:true,
      \   markdown: v:true,
      \   text: v:true,
      \ }
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
imap <C-L> <Plug>(copilot-accept-word)
imap <M-]> <Plug>(copilot-next-completion)
imap <M-[> <Plug>(copilot-previous-completion)

" molder
let g:molder_show_hidden = 1
