snippet #!
  #!/usr/bin/env ruby

  ${1:code}

snippet beg
  begin
    ${3}
  rescue ${1:Exception} => ${2:e}
  end

snippet req
  require "${1}"${2}

snippet case
  case ${1:object}
  when ${2:condition}
    ${3}
  end

snippet def
  def ${1:method_name}
    ${2}
  end

snippet if
  if ${1:condition}
    ${2}
  end

snippet while
  while ${1:condition}
    ${2}
  end

snippet cla
  class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
    def initialize(${2:args})
      ${3}
    end
  end

snippet glo
  Dir.glob("${1:dir/glob/*}") do |${2:file}|
    ${3}
  end

snippet fileread
  ${0:var} = open("${1:path}").read

snippet file
  open(${1:"path/or/url/or/pipe"}, "${2:w}") do |${3:io}|
    ${4}
  end

snippet test
  require "test/unit"
  require "${1:library_file_name}"

  class Test${2:$1} < Test::Unit::TestCase
    def test_${3:case_name}
      ${4}
    end
  end

snippet ass
  assert ${1:test}, "${2:Failure message.}"${3}

snippet ase
  assert_equal ${1:expected}, ${2:actual}${3}

snippet bench
  Benchmark.bm do |r|
    r.report "${1}" do
      ${2}
    end
  end

snippet sha1
  require 'digest/sha1'
  Digest::SHA1.hexdigest("${1:string}")

snippet std
  while line = gets
    puts line.strip.split.map(&:to_i)
  end
