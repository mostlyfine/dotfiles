########################################
# Ruby snippets - for Rails, see below #
########################################

# encoding for Ruby 1.9
snippet enc
  # encoding: utf-8

# #!/usr/bin/env ruby
snippet #!
  #!/usr/bin/env ruby
  # -*- coding: utf-8 -*-
snippet beg
  begin
    ${3}
  rescue ${1:Exception} => ${2:e}
  end

snippet req require
  require "${1}"${2}
snippet case
  case ${1:object}
  when ${2:condition}
    ${3}
  end
snippet def
  def ${1:method_name}
    ${2}
  end
snippet if
  if ${1:condition}
    ${2}
  end
snippet while
  while ${1:condition}
    ${2}
  end
snippet for
  for ${1:e} in ${2:c}
    ${3}
  end
snippet cla class .. initialize .. end
  class ${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}
    def initialize(${2:args})
      ${3}
    end
  end
snippet usa
  if ARGV.${1}
    abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
  end
snippet glo Dir Dir.global() { |file| .. }
  Dir.glob(${1:"dir/glob/*"}) do |${2:file}|
    ${3}
  end
snippet lam
  lambda { |${1:args}| ${2} }
snippet ope
  open(${1:"path/or/url/or/pipe"}, "${2:w}") do |${3:io}|
    ${4}
  end
snippet tc
  require "test/unit"

  require "${1:library_file_name}"

  class Test${2:$1} < Test::Unit::TestCase
    def test_${3:case_name}
      ${4}
    end
  end
snippet ass
  assert ${1:test}, "${2:Failure message.}"${3}
snippet ase
  assert_equal ${1:expected}, ${2:actual}${3}
# Benchmark.bmbm do .. end
snippet bm-
  TESTS = ${1:10_000}
  Benchmark.bmbm do |results|
    ${2}
  end
snippet sha1
  Digest::SHA1.hexdigest(${1:string})
#rspec
snippet it
  it "${1:spec_name}" do
    ${2}
  end
snippet desc
  describe ${1:class_name} do
    ${2}
  end
